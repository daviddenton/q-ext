{"name":"Q-ext","tagline":"Q extensions","body":"#q-ext\r\n[![NPM version](https://badge.fury.io/js/q-ext.svg)](http://badge.fury.io/js/q-ext)\r\n[![Build Status](https://travis-ci.org/daviddenton/q-ext.png?branch=master)](https://travis-ci.org/daviddenton/q-ext)\r\n[![Coverage Status](https://coveralls.io/repos/daviddenton/q-ext/badge.png)](https://coveralls.io/r/daviddenton/q-ext)\r\n[![Dependency Status](https://david-dm.org/daviddenton/q-ext.png)](https://david-dm.org/daviddenton/q-ext)\r\n[![devDependency Status](https://david-dm.org/daviddenton/q-ext/dev-status.png)](https://david-dm.org/daviddenton/q-ext#info=devDependencies)\r\n\r\n###What\r\nMethods to extend the Q promise library.\r\n\r\n###Installation\r\nVia npm, simply run: ```npm install q-ext```\r\n\r\n###Usage\r\n\r\n####allSettled(namedPromiseObject) -> Promise\r\nSimply pass an object with named promises. The results are grouped by result (fulfilled/rejected) which can then\r\nbe spread() into a node-like callback which gives you the errorsByName and resultsByName:\r\n```javascript\r\nqExt.allSettled({\r\n    aSuccessfulPromise: q.resolve('result'),\r\n    anotherSuccessfulPromise: q.resolve('anotherResult'),\r\n    anUnsuccessfulPromise: q.reject('error'),\r\n    anotherUnsuccessfulPromise: q.reject('anotherError')\r\n}).spread(function (errorsByName, successesByName) {\r\n    console.log('errors:', errorsByName);\r\n    console.log('successes:', successesByName);\r\n}).done();\r\n```\r\n\r\nPassing an array of promises defers to the traditional form:\r\n```javascript\r\nqExt.allSettled([q.resolve('result'), q.reject('error')]).spread(function (success, error) {\r\n    console.log('success:', success);\r\n    console.log('error:', error);\r\n}).done();\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}